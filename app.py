from flask import Flask, request, jsonify, render_template
import rule_based
import ml_based

app = Flask(__name__)


def read_model_evaluation():
    """
    Reads the model evaluation details from the `model_evaluation.txt` file.
    Returns a dictionary with model details as strings.
    """
    evaluation_details = {
        'ml_model': None,
        'model_accuracy': None,
        'confusion_matrix': None,
        'classification_report': None,
    }
    try:
        with open('notes/model_evaluation.txt', 'r', encoding='utf-8') as file:
            lines = file.readlines()
            reading_conf_matrix = False
            reading_class_report = False
            confusion_matrix_lines = []
            classification_report_lines = []

            for line in lines:
                if "Accuracy:" in line:
                    evaluation_details['model_accuracy'] = lines[lines.index(line) + 1].strip()

                elif "Confusion Matrix:" in line:
                    reading_conf_matrix = True
                    reading_class_report = False
                elif "Classification Report:" in line:
                    reading_class_report = True
                    reading_conf_matrix = False

                elif reading_conf_matrix:
                    if line.strip():
                        confusion_matrix_lines.append(line.strip())
                    else:
                        reading_conf_matrix = False
                        evaluation_details['confusion_matrix'] = "\n".join(confusion_matrix_lines)

                elif reading_class_report:
                    classification_report_lines.append(line.strip())

            # Assign the full classification report if found
            evaluation_details['classification_report'] = "\n".join(classification_report_lines).strip()

    except FileNotFoundError:
        print("Error: `model_evaluation.txt` not found. Ensure the file is generated by the ML module.")
    except Exception as e:
        print(f"Unexpected error occurred while reading the model evaluation: {e}")

    return evaluation_details

@app.route('/')
def home_page():
    return render_template("index.html")


@app.route('/', methods=['POST'])
def classify_sms():
    # Get sms texe from the form
    sms_text = request.form.get('sms', '').strip()

    if not sms_text:
        return jsonify({'error': 'SMS text is required'}), 400

    # Initialize detection details
    detection_details = {
        'method': None,
        'reason': None,
        'model_accuracy': None,
        'confusion_matrix': None,
        'classification_report': None,
    }

    # rule based detection
    is_spam = rule_based.is_phishing_sms(sms_text)
    if is_spam:
        detection_details['method'] = 'Rule based detection'
        detection_details['reason'] = rule_based.get_rule_violated(sms_text)
        print(rule_based.get_rule_violated(sms_text))
    # ml based detection
    else:
        detection_details['method'] = 'ML based detection'
        is_spam = ml_based.is_phishing_sms(sms_text)
        eval_results = read_model_evaluation()
        print(eval_results)
        detection_details['model_accuracy'] = eval_results['model_accuracy']
        detection_details['confusion_matrix'] = eval_results['confusion_matrix']
        detection_details['classification_report'] = eval_results['classification_report']

    print('detection details: ', detection_details)
    result = {'is_spam' : is_spam,
              **detection_details}

    # TO DO: Show an informative result evaluation.
    # Why is it evaluated as spam, because of the rule_based? Which rule?
    # Because of ML classification? Which model, present the related model evaluation results.
    # Send back a JSON response
    return render_template("index.html", result=result)


@app.route('/presentation')
def presentation():
    return render_template("presentation.html")

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8080, debug=True)